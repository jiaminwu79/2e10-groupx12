#include <WiFiNINA.h>  //connect server/client

char ssid[] = "Saoirse's Phone";
char pass[] = "saoirse1234";

WiFiServer server(80);   //motor control server
WiFiServer server1(01);  //obstacle server
WiFiServer server2(02);
WiFiServer server3(03);  

char cmd = 'C';

//setting fixed speeds
int start_speed = 125;
int stop_speed = 0;
int slow_turn = 75;
int fast_turn = 200;

//motor pins
int LM_forward = 4;   //pin 2 on h bridge
int LM_backward = 3;  //pin 7 on h bridge
int RM_backward = 5;  //pin 15 on h bridge
int RM_forward = 6;   //pin 10 on h bridge

//IR Control
const int LEYE = 2;
const int REYE = 12;

//speed pins
const int LM_speed = 19;
const int RM_speed = 17;

//ultrasonic
const int US_TRIG = 7;
const int US_ECHO = 8;

//ultrasonic eqn
float duration;
int distance;  //convenience for outputting

//PID computed via tuning
double kp = 10;
double ki = 0.00001;
double kd = 1.1;

//PID variables
unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
const double setPoint = 15;
double cumError, rateError;
double Speedvalue;

bool sentinal;  //for turning function

//encoder variables
const int l_encoder_pin = 19;
const int r_encoder_pin = 21;

double curr_obj_prox = 0;
double prev_obj_prox = 0;
long curr_obj_prox_time = 1;
long prev_obj_prox_time = 0;

const double circumference = 214;
const int velocity_update_threshold = 100;
int velocity_update_last = 0;
double velocity = 0;
double obj_velocity = 0;

int r_encoder_pings = 0;
int l_encoder_pings = 0;
int r_encoder_calculation = 0;
int l_encoder_calculation = 0;
int encoder_time_last = 0;
int encoder_time_curr = 0;
int encoder_time_diff = 0;





void setup() {
  Serial.begin(9600);

  //server/client connection
  WiFi.begin(ssid, pass);
  IPAddress ip = WiFi.localIP();

  //confirm connection
  Serial.print("IP Address:");
  Serial.println(ip);  // prints when ip is connected
  server.begin();      //starts motor control server
  server1.begin();     //starts obstacle server
  server2.begin();  
  server3.begin();   

  //set-up ultra
  pinMode(US_TRIG, OUTPUT);
  pinMode(US_ECHO, INPUT);

  //set up motor pins
  pinMode(LM_forward, OUTPUT);
  pinMode(LM_backward, OUTPUT);
  pinMode(RM_backward, OUTPUT);
  pinMode(RM_forward, OUTPUT);

  //ir set-up
  pinMode(REYE, INPUT);
  pinMode(LEYE, INPUT);

  //encoder set-up
  pinMode(r_encoder_pin, INPUT_PULLUP);
  pinMode(l_encoder_pin, INPUT_PULLUP);
  attachInterrupt(r_encoder_pin, r_encoder, CHANGE);
  attachInterrupt(l_encoder_pin, l_encoder, CHANGE);
}

void loop() {  //trying high low speeds to make pins work
  //wifi object
  WiFiClient client = server.available();
  WiFiClient client2 = server1.available();
  WiFiClient client3 = server2.available();


  //sentinal = 0;

  //checking connection
  if (client.connected()) {
    Serial.println("Client Connected");
    //distance computation
    int c = 1;  // = client.read();
    char turn = client.read();
    while (c != 0 && turn != 'X') {
      c = client.read();  //controls on off

      echo_follow();
      if (millis() - velocity_update_last > velocity_update_threshold)
        velocity_update_last = millis();
      
        buggy_velocity();
        object_velocity();
        server3.print(String(obj_velocity)+ "\n");
        Serial.println("Velocity: " + String(velocity));
        Serial.println("Object Velocity: " + String(obj_velocity));

       
      
    }
    
  }
  stop();
  
}



void echo_follow() {
  //trigger on for 2 seconds
  digitalWrite(US_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(US_TRIG, LOW);

  duration = pulseIn(US_ECHO, HIGH);
  distance = (duration * .0293) / 2;

  Speedvalue = computePID(distance);  //computes constant for PID control
  //controls IR response
  go(distance, Speedvalue);  //actual speed value is computed in drive functio
  // Prints the distance on the Serial Monitor
}


//PID Functions
double computePID(double inp) {
  currentTime = millis();                              //get current time
  elapsedTime = (double)(currentTime - previousTime);  //compute time elapsed from previous computation

  error = (setPoint - inp);                       // determine error
  cumError += error * elapsedTime;                // compute integral
  rateError = (error - lastError) / elapsedTime;  // compute derivative

  double out = kp * error + ki * cumError + kd * rateError;  //PID output

  lastError = error;           //remember current error
  previousTime = currentTime;  //remember current time

  return out;  //have function return the PID Result
}

void object_velocity() {
  curr_obj_prox = distance;
  curr_obj_prox_time = micros();

  obj_velocity = velocity + (((curr_obj_prox - prev_obj_prox) * 1000000) / (curr_obj_prox_time - prev_obj_prox_time));

  prev_obj_prox = curr_obj_prox;
  prev_obj_prox_time = curr_obj_prox_time;
}

void r_encoder() {
  r_encoder_pings++;
}

void l_encoder() {
  l_encoder_pings++;
}

void buggy_velocity() {
  r_encoder_calculation = r_encoder_pings;
  r_encoder_calculation = 0;
  l_encoder_calculation = l_encoder_pings;
  l_encoder_pings = 0;
  encoder_time_curr = micros();
  encoder_time_diff = encoder_time_curr - encoder_time_last;
  encoder_time_last = encoder_time_curr;

  velocity = ((r_encoder_calculation + l_encoder_calculation) * 500000.0 * circumference) / (double(encoder_time_diff) * 960);
  
  
  server2.print(String(velocity)+ "\n");
}


//functions for drive control
void start(int L, int R) {
  analogWrite(LM_forward, L);
  analogWrite(LM_backward, stop_speed);
  analogWrite(RM_backward, stop_speed);
  analogWrite(RM_forward, R);
}

void stop() {
  analogWrite(LM_forward, stop_speed);
  analogWrite(LM_backward, stop_speed);
  analogWrite(RM_backward, stop_speed);
  analogWrite(RM_forward, stop_speed);
}

void right() {
  analogWrite(LM_forward, fast_turn);
  analogWrite(LM_backward, stop_speed);
  analogWrite(RM_backward, stop_speed);
  analogWrite(RM_forward, slow_turn);
}

void left() {
  analogWrite(LM_forward, slow_turn);
  analogWrite(LM_backward, stop_speed);
  analogWrite(RM_backward, stop_speed);
  analogWrite(RM_forward, fast_turn);
}

void slow() {
  analogWrite(LM_forward, start_speed);
  analogWrite(LM_backward, stop_speed);
  analogWrite(RM_backward, stop_speed);
  analogWrite(RM_forward, start_speed);
}

void backward(int L, int R) {
  analogWrite(LM_forward, stop_speed);
  analogWrite(LM_backward, L);
  analogWrite(RM_backward, R);
  analogWrite(RM_forward, stop_speed);
}

void slowbackward() {
  analogWrite(LM_forward, stop_speed);
  analogWrite(LM_backward, start_speed);
  analogWrite(RM_backward, start_speed);
  analogWrite(RM_forward, stop_speed);
}

void leftbackward() {
  analogWrite(LM_forward, stop_speed);
  analogWrite(LM_backward, slow_turn);
  analogWrite(RM_backward, fast_turn);
  analogWrite(RM_forward, stop_speed);
}

void rightbackward() {
  analogWrite(LM_forward, stop_speed);
  analogWrite(LM_backward, fast_turn);
  analogWrite(RM_backward, slow_turn);
  analogWrite(RM_forward, stop_speed);
}

//printing to processing
void distance_output(int x) {
  switch (x) {
    case (11):
      server1.println('1');
      break;
  }
}


//for IR control
void go(int d, double s) {

  int leye_initital_value = digitalRead(LEYE);
  int reye_initital_value = digitalRead(REYE);
  const int black = HIGH;
  const int white = LOW;

  int Speed =  abs(s);


  if (Speed > 230) {
    Speed = 230;
  }
  if (reye_initital_value == black && leye_initital_value == black) {
    Speed = 125;
  }

  

  if (d > 15 && d != 0) {

    if (leye_initital_value == black && reye_initital_value == black) {
      start(Speed, Speed);  //PID conrolled speeds
    }
    if (leye_initital_value == white && reye_initital_value == black) {
      right();
    }


    if (leye_initital_value == black && reye_initital_value == white) {
      left();
    }

    if (reye_initital_value == white && leye_initital_value == white) {
      slow();
    }

    if (d < 20 && d > 15) {
      distance_output(d);  //object reporting
    }
  } else if (d < 15 && d > 0) {

    if (d < 15 && d > 10) {
      distance_output(d);  //object reporting
    }


    if (leye_initital_value == black && reye_initital_value == black) {
      backward(Speed, Speed);  //PID controlled speeds
    }

    if (leye_initital_value == white && reye_initital_value == black) {
      rightbackward();
    }
    if (leye_initital_value == black && reye_initital_value == white) {
      leftbackward();
    }
    if (reye_initital_value == white && leye_initital_value == white) {
      slowbackward();
    }
  }

  if (d > 14 && d < 16) {
    stop();
  }
}


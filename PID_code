#include <WiFiNINA.h>


char ssid[] = "AndroidAP62fc";
char pass[] = "12345678910";
WiFiClient client;
IPAddress server(192, 168, 235, 246);


char cmd = 'C';


//setting infrared sensors to allocated pins
const int LEYE = 2;
const int REYE = 12;


//Motor set up
int LM_pin1 = 4;    //pin 2 on h bridge
int LM_pin2 = 3;    //pin 7 on h bridge
int RM_pin1 = 6;    //pin 10 on h bridge
int RM_pin2 = 5;    //pin 15 on h bridge
int LM_speed = 19;  //left motor speed control
int RM_speed = 17;  //right motor speed control


//setting fixed speeds
int start_speed = 125;
int stop_speed = 0;
int slow_turn = 75;
int fast_turn = 200;


//setting ultrasonic sensors to allocated pins
const int US_TRIG = 7;
const int US_ECHO = 8;


long duration;
int distance;


//pid constants
int enable_signal = 0;
double kp = 12;
double ki = 0.00001;
double kd = 2;


//variables used
unsigned long currentTime, previousTime;
double elapsedTime;
double error;
double lastError;
double input, output;
double setPoint = 9;
double cumError = 0;
double rateError = 0;




void Start() {
 analogWrite(LM_pin1, start_speed);
 analogWrite(LM_pin2, stop_speed);
 analogWrite(RM_pin1, start_speed);
 analogWrite(RM_pin2, stop_speed);
}


void right() {
 analogWrite(LM_pin1, fast_turn);
 analogWrite(LM_pin2, stop_speed);
 analogWrite(RM_pin1, slow_turn);
 analogWrite(RM_pin2, stop_speed);
}


void left() {
 analogWrite(LM_pin1, slow_turn);
 analogWrite(LM_pin2, stop_speed);
 analogWrite(RM_pin1, fast_turn);
 analogWrite(RM_pin2, stop_speed);
}


void Stop() {
 analogWrite(LM_pin1, stop_speed);
 analogWrite(LM_pin2, stop_speed);
 analogWrite(RM_pin1, stop_speed);
 analogWrite(RM_pin2, stop_speed);
}


void go() {
 int leye_initital_value = digitalRead(LEYE);
 int reye_initital_value = digitalRead(REYE);
 const int black = HIGH;
 const int white = LOW;


 if (leye_initital_value == black && reye_initital_value == black) {
   Start();
 }
 if (leye_initital_value == white && reye_initital_value == black) {
   right();
 }
 if (leye_initital_value == black && reye_initital_value == white) {
   left();
 }
}


void echo_follow() {
 //trigger on for 2 seconds
 digitalWrite(US_TRIG, LOW);
 delayMicroseconds(2);


 //detecting sound for 10 seconds
 digitalWrite(US_TRIG, HIGH);
 delayMicroseconds(10);
 digitalWrite(US_TRIG, LOW);


 duration = pulseIn(US_ECHO, HIGH);
 distance = duration / 58;
 // Prints the distance on the Serial Monitor
 if (distance >= 10) {
   go();
 } else {
   Stop();
   client.print("Obstacle detected");
   delay(500);
 }
}


double computePID(double inp){
 currentTime = millis();                                 // get current time
 elapsedTime = currentTime - previousTime;               // compute time elapsed from previous computation
      
 error = setPoint - inp;                                 // determine error
 cumError += error * elapsedTime;                        // compute integral
 rateError = (error - lastError)/elapsedTime;            // compute derivative


 double out = (kp*error + ki*cumError + kd*rateError)*-1;     // PID output              
 lastError = error;                                      // remember current error
 previousTime = currentTime;                             // remember current time
 return out;                                             // have function return the PID output
}




void setup() {
 Serial.begin(9600);  // Init Serial at 9600 Baud Rate.
  // Connect to Wi-Fi network
 Serial.print("Connecting to ");
 Serial.println(ssid);
 WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
   delay(1000);
   Serial.println("Connecting...");
 }
  Serial.println("Connected to Wi-Fi");
  client.connect(server, 5200);
  if (client.connected()) {
   Serial.println("Connected to server");
   client.write("Hello server");
 } else {
   Serial.println("Connection to server failed");
 }
  IPAddress ip = WiFi.localIP();
 Serial.print("IP Adress: ");
 Serial.println(ip);


 pinMode(LEYE, INPUT);
 pinMode(REYE, INPUT);


 //turning on
 pinMode(LM_pin1, OUTPUT);
 pinMode(LM_pin2, OUTPUT);
 pinMode(RM_pin1, OUTPUT);
 pinMode(RM_pin2, OUTPUT);


 //ultra set up
 pinMode(US_TRIG, OUTPUT);
 pinMode(US_ECHO, INPUT);
}






void loop() {
 if (client.connected()) {
   if (client.available()) {
     char c = client.read();
     if (isAlpha(c)) {
       cmd = c;
       Serial.println(cmd);
     }
   }
   //client.write("Hello Client");


  // execute the appropriate action based on the current command
   if (cmd == 'A') {
     // follow echoes if the command is 'A'
     echo_follow();
   } else if (cmd == 'C') {
     // stop the buggy if the command is 'C'
     Stop();
   }
 } else {
   // if the client is not connected, try to reconnect
   client.stop();
   WiFi.begin(ssid, pass);
   while (WiFi.status() != WL_CONNECTED) {
     delay(500);
     Serial.print(".");
   }
   client.connect(server, 5200);
 }
}

import controlP5.*;
import processing.net.*;

ControlP5 cp5;
Server myServer;
int c1, c2;
String C;

void setup() {
  size(400, 250);

  cp5 = new ControlP5(this);

  cp5.addButton("start")
     .setValue(0)
     .setPosition(80, 50)
     .setSize(100, 60);

  cp5.addButton("stop")
     .setValue(0)
     .setPosition(220, 50)
     .setSize(100, 60);
     
  cp5.addButton("status")
     .setValue(0)
     .setPosition(140 ,130)
     .setSize(100,60);

  myServer = new Server(this, 5200);
}
void draw() {
  background(255);
  Client thisClient = myServer.available();

  if (thisClient != null) {
    String clientResponse = thisClient.readString();

    if (clientResponse != null) {
      println(clientResponse);
    }  
  }
}

public void start(int value) {
  myServer.write("A");
  println("'Start' button pressed.");
}

public void stop(int value) {
  myServer.write("C");
  println("'Stop' button pressed.");
}

public void Status() {
  if  (myServer.active()){
    myServer.write("q");
    
    println("'Status' button pressed.");  
    int distance = 0;
    int enable_signal = 0;
  
try {
      Client client = myServer.available();
      distance = client.read();
      enable_signal = client.read();
      println("Distance: " + distance + "\n");
      println("Enable Signal: " + enable_signal + "\n");
    } catch (Exception e) {
      e.printStackTrace();
      println("Error reading data from server.");
    }
  }
}




